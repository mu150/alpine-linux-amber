name: Generate Alpine ARM64 initrd
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  generate-initrd:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 1. Register QEMU emulation for aarch64
      - name: Set up binfmt (for nonâ€‘x86 chroots)
        uses: docker/setup-binfmt-action@v2
      - name: Set up QEMU user emulation
        uses: docker/setup-qemu-action@v2

      # 2. Bootstrap Alpine aarch64 via a tested action
      - name: Setup Alpine v3.22 (aarch64)
        uses: jirutka/setup-alpine@v1
        with:
          branch: v3.22
          arch: aarch64

      # 3. Inside Alpine, install kernel+mkinitfs and build the initrd
      - name: Build initrd inside Alpine chroot
        shell: alpine.sh {0}
        run: |
          set -eux
          # Ensure we have a kernel (with modules) and mkinitfs
          apk update
          apk add --no-cache \
            linux-virt      \
            mkinitfs        \
            busybox

          # Find the kernel version directory under /lib/modules
          KVER=$(ls /lib/modules | head -n1)
          echo "Generating initrd for kernel $KVER"
          
          # Generate a compressed initramfs
          mkinitfs \
            -c /etc/mkinitfs/mkinitfs.conf \
            -k "$KVER"                     \
            -o /tmp/initrd-arm64.gz

          ls -lh /tmp/initrd-arm64.gz

      # 4. Upload the generated initrd as a GitHub Actions artifact
      - name: Upload initrd artifact
        uses: actions/upload-artifact@v4
        with:
          name: alpine-initrd-arm64
          path: /tmp/initrd-arm64.gz
