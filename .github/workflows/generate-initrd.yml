name: Generate Alpine ARM64 initrd

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  generate-initrd:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install host deps
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support

      - name: Download Alpine aarch64 minirootfs
        run: |
          wget -O alpine-minirootfs.tar.gz \
            "http://dl-cdn.alpinelinux.org/alpine/v3.22/releases/aarch64/alpine-minirootfs-3.22.0-aarch64.tar.gz"

      - name: Prepare chroot tree
        run: |
          rm -rf rootfs
          mkdir -p rootfs/{dev,proc,sys}
          tar xzf alpine-minirootfs.tar.gz -C rootfs
          sudo cp /etc/resolv.conf rootfs/etc/
          sudo cp /usr/bin/qemu-aarch64-static rootfs/usr/bin/
          for fs in dev proc sys; do sudo mount --bind /$fs rootfs/$fs; done

      - name: Build initrd inside chroot
        run: |
          sudo chroot rootfs /bin/sh -eux << 'EOF'
            # Inside the Alpine chroot:
            apk update
            apk add --no-cache mkinitfs linux-virt

            KVER=$(ls /lib/modules)
            echo "Generating initrd for kernel modules: $KVER"

            # Output to the chroot's /initrd-arm64.gz
            mkinitfs \
              -c /etc/mkinitfs/mkinitfs.conf \
              -k "$KVER" \
              -o /initrd-arm64.gz
          EOF

      - name: Cleanup mounts
        run: |
          for fs in dev proc sys; do sudo umount rootfs/$fs || true; done

      - name: Copy initrd to workspace
        run: |
          set -eux
          # ensure it exists
          [ -f rootfs/initrd-arm64.gz ]
          # pull it out
          cp rootfs/initrd-arm64.gz initrd-arm64.gz
          ls -lh initrd-arm64.gz

      - name: Upload initrd artifact
        uses: actions/upload-artifact@v4
        with:
          name: alpine-initrd-arm64
          path: initrd-arm64.gz
