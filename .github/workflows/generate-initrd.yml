name: Generate Alpine ARM64 initrd

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  generate-initrd:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU emulation
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Download Alpine ARM64 rootfs
        run: |
          wget -O alpine-minirootfs.tar.gz \
            http://dl-cdn.alpinelinux.org/alpine/v3.22/releases/aarch64/alpine-minirootfs-3.22.0-aarch64.tar.gz

      - name: Generate initrd inside ARM container
        run: |
          docker run --rm \
            --platform linux/arm64 \
            -v $PWD:/workspace -w /workspace \
            alpine:3.22.0-aarch64 \
            /bin/sh -euxc "
              apk update
              apk add --no-cache mkinitfs linux-virt qemu-user-static

              # Alpineâ€™s modules directory (e.g. 5.15.0-virt)
              MODVER=\$(ls /lib/modules)
              echo \"Using modules: \$MODVER\"

              # reconstruct the rootfs from the tarball
              mkdir -p /alpine && \
              tar xzf alpine-minirootfs.tar.gz -C /alpine

              # bind QEMU into the chroot so that mkinitfs can run
              cp /usr/bin/qemu-aarch64-static /alpine/usr/bin/

              # chroot and generate the initrd, dropping it in /workspace
              chroot /alpine /bin/sh -euxc \"
                mkinitfs \
                  -c /etc/mkinitfs/mkinitfs.conf \
                  -k \$MODVER \
                  -o /workspace/initrd-arm64.gz
              \"
            "

      - name: Debug: list workspace
        run: |
          echo ">> workspace contents:"
          ls -lh

      - name: Upload initrd artifact
        uses: actions/upload-artifact@v4
        with:
          name: alpine-initrd-arm64
          path: initrd-arm64.gz
