name: Generate Alpine ARM64 initrd

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  generate-initrd:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out your code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Register QEMU/binfmt so chroot can exec ARM64 binaries
      - name: Register QEMU emulation
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      # 3. Install host dependencies
      - name: Install host deps
        run: |
          sudo apt-get update
          sudo apt-get install -y binfmt-support qemu-user-static

      # 4. Bootstrap Alpine aarch64 (v3.22)
      - name: Setup Alpine v3.22 aarch64
        uses: jirutka/setup-alpine@v1
        with:
          branch: v3.22
          arch: aarch64

      # 5. Inside the Alpine chroot (as root!), install kernel + mkinitfs and build the initrd
      - name: Build initrd in Alpine chroot
        shell: alpine.sh --root {0}
        run: |
          set -eux

          # 5.1 Update index and install kernel & mkinitfs tooling
          apk update
          apk add --no-cache linux-virt mkinitfs busybox

          # 5.2 Pick the installed kernel version (e.g. "6.12.35-0-virt")
          KVER=$(ls /lib/modules | head -n1)
          echo "Generating initrd for kernel $KVER"

          # 5.3 Generate the initramfs (Alpine always writes to /boot/initramfs-<flavor>)
          mkinitfs -c /etc/mkinitfs/mkinitfs.conf -k "$KVER"

          # 5.4 Verify the real file name (usually "initramfs-virt") and copy it out
          ls -lh /boot
          cp /boot/initramfs-* /tmp/initrd-arm64.gz
          ls -lh /tmp/initrd-arm64.gz

      # 6. Upload the resulting initrd as an artifact
      - name: Upload initrd artifact
        uses: actions/upload-artifact@v4
        with:
          name: alpine-initrd-arm64
          path: /tmp/initrd-arm64.gz
