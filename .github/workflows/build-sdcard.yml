name: Build & Release Alpine RG353VS SD‑Card Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: QEMU & Buildx
        uses: docker/setup-qemu-action@v3
        with: { platforms: arm64 }
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          platforms: |
            linux/amd64
            linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/alpine-rg353vs:latest
            ghcr.io/${{ github.repository_owner }}/alpine-rg353vs:${{ github.sha }}

      - name: Save container tarball
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/alpine-rg353vs:${{ github.sha }}
          docker pull "$IMAGE"
          docker save "$IMAGE" | gzip > alpine-rg353vs-${{ github.sha }}.tar.gz

      - name: Upload container artifact
        uses: actions/upload-artifact@v4
        with:
          name: container-${{ github.sha }}
          path: alpine-rg353vs-${{ github.sha }}.tar.gz

  make-sd-image:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget parted dosfstools e2fsprogs kmod u-boot-tools

      - name: Build SD‑Card Image
        run: |
          set -euxo pipefail
          SHA=${{ github.sha }}
          IMG=alpine-rg353vs-${SHA}.img
          UBOOT=uboot.img
          MINIROOT=http://dl-cdn.alpinelinux.org/alpine/v3.19/releases/aarch64/alpine-minirootfs-3.19.0-aarch64.tar.gz

          # Download Alpine rootfs
          wget -O rootfs.tar.gz "$MINIROOT"

          # 1) Create blank 1 GiB image
          truncate -s 1G "$IMG"

          # 2) Partition by BMBR with sector units
          #    - 512-byte sectors: 2048s = 1 MiB, 131071s = 64 MiB - 1
          parted --script "$IMG" \
            mklabel msdos \
            unit s \
            mkpart primary fat32 2048 131071 \
            mkpart primary ext4 131072 -1 \
            set 1 boot on

          # 3) Attach image to a loop device for mkfs
          LOOP=$(sudo losetup --show -fP "$IMG")
          BOOT_DEV="${LOOP}p1"
          ROOT_DEV="${LOOP}p2"

          # 4) Format partitions
          sudo mkfs.vfat -F 32 -n BOOT "$BOOT_DEV"
          sudo mkfs.ext4 -L ROOTFS "$ROOT_DEV"

          # 5) Detach the loop device
          sudo losetup -d "$LOOP"

          # 6) Flash U‑Boot at 8 KiB offset in the raw image
          dd if="$UBOOT" of="$IMG" bs=1K seek=8 conv=fsync

          # 7) Mount by offset and populate
          mkdir -p mnt/boot mnt/root

          # FAT partition starts at 1 MiB = 1048576 bytes
          sudo mount -o loop,offset=1048576 -t vfat "$IMG" mnt/boot
          # ext4 partition starts at 64 MiB = 67108864 bytes
          sudo mount -o loop,offset=67108864 -t ext4 "$IMG" mnt/root

          sudo tar xzf rootfs.tar.gz -C mnt/root
          sudo cp zImage     mnt/boot/
          sudo cp *.dtb      mnt/boot/
          sudo cp boot.scr   mnt/boot/

          # 8) Cleanup
          sync
          sudo umount mnt/boot mnt/root

          ls -lh "$IMG"

      - name: Upload SD‑Card artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdcard-${{ github.sha }}
          path: alpine-rg353vs-${{ github.sha }}.img

  package-release:
    needs: [build-and-push, make-sd-image]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        id: release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            - **Container**: ghcr.io/${{ github.repository_owner }}/alpine-rg353vs:${{ github.sha }}
            - **SD‑Card image**: alpine-rg353vs-${{ github.ref_name }}.img
            - **Container tarball**: alpine-rg353vs-${{ github.ref_name }}.tar.gz
          draft: false
          prerelease: false

      - name: Upload SD‑Card release asset
        uses: actions/upload-release-asset@v4
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: artifacts/alpine-rg353vs-${{ github.sha }}.img
          asset_name: alpine-rg353vs-${{ github.ref_name }}.img
          asset_content_type: application/octet-stream

      - name: Upload container release asset
        uses: actions/upload-release-asset@v4
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: artifacts/alpine-rg353vs-${{ github.sha }}.tar.gz
          asset_name: alpine-rg353vs-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip
