name: Build & Release Alpine RG353VS SD‑Card Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build & Push Container
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup QEMU emulation
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push multi‑arch image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          platforms: |
            linux/amd64
            linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/alpine-rg353vs:latest
            ghcr.io/${{ github.repository_owner }}/alpine-rg353vs:${{ github.sha }}

      - name: Save container tarball
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/alpine-rg353vs:${{ github.sha }}
          docker pull "$IMAGE"
          docker save "$IMAGE" | gzip > alpine-rg353vs-${{ github.sha }}.tar.gz

      - name: Upload container artifact
        uses: actions/upload-artifact@v4
        with:
          name: container-${{ github.sha }}
          path: alpine-rg353vs-${{ github.sha }}.tar.gz

  make-sd-image:
    name: Build SD‑Card Image
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install host dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            wget parted dosfstools e2fsprogs kmod u-boot-tools

      - name: Build SD‑Card Image
        run: |
          set -euxo pipefail
          SHA=${{ github.sha }}
          IMG=alpine-rg353vs-${SHA}.img
          UBOOT=uboot.img
          MINIROOT=http://dl-cdn.alpinelinux.org/alpine/v3.19/releases/aarch64/alpine-minirootfs-3.19.0-aarch64.tar.gz

          # Download Alpine rootfs
          wget -O rootfs.tar.gz "$MINIROOT"

          # Create blank 1 GiB image file
          truncate -s 1G "$IMG"

          # Partition the image file (operates on the file directly)
          parted --script "$IMG" \
            mklabel msdos \
            mkpart primary fat32 1MiB 64MiB \
            mkpart primary ext4  64MiB 100% \
            set 1 boot on

          # Attach the file as a loop device (kernel now sees partitions)
          LOOP=$(sudo losetup --show -fP "$IMG")
          # Ensure the kernel maps partitions
          sudo partx -a "$LOOP"

          BOOT_DEV="${LOOP}p1"
          ROOT_DEV="${LOOP}p2"

          # Format each partition
          sudo mkfs.vfat -F 32 -n BOOT "$BOOT_DEV"
          sudo mkfs.ext4 -L ROOTFS "$ROOT_DEV"

          # Flash U‑Boot at 8 KiB
          sudo dd if="$UBOOT" of="$LOOP" bs=1K seek=8 conv=fsync

          # Mount and populate filesystems
          mkdir -p mnt/boot mnt/root
          sudo mount -t vfat "$BOOT_DEV" mnt/boot
          sudo mount -t ext4 "$ROOT_DEV" mnt/root

          sudo tar xzf rootfs.tar.gz -C mnt/root
          sudo cp zImage   mnt/boot/
          sudo cp *.dtb    mnt/boot/
          sudo cp boot.scr mnt/boot/

          # Cleanup
          sync
          sudo umount mnt/boot mnt/root
          sudo losetup -d "$LOOP"

          # Show result
          ls -lh "$IMG"

      - name: Upload SD‑Card artifact
        uses: actions/upload-artifact@v4
