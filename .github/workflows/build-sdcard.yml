name: Build & Release Alpine RG353VS SD‑Card Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build & Push Container
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push multi‑arch image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          platforms: |
            linux/amd64
            linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/alpine-rg353vs:latest
            ghcr.io/${{ github.repository_owner }}/alpine-rg353vs:${{ github.sha }}

      - name: Save container tarball
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/alpine-rg353vs:${{ github.sha }}
          docker pull "$IMAGE"
          docker save "$IMAGE" | gzip > alpine-rg353vs-${{ github.sha }}.tar.gz

      - name: Upload container artifact
        uses: actions/upload-artifact@v4
        with:
          name: container-${{ github.sha }}
          path: alpine-rg353vs-${{ github.sha }}.tar.gz

  make-sd-image:
    name: Build SD‑Card Image
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget parted dosfstools e2fsprogs kmod u-boot-tools

      - name: Build SD‑Card Image
        run: |
          set -euxo pipefail
          SHA=${{ github.sha }}
          IMG=alpine-rg353vs-${SHA}.img
          UBOOT=uboot.img
          MINIROOT=http://dl-cdn.alpinelinux.org/alpine/v3.19/releases/aarch64/alpine-minirootfs-3.19.0-aarch64.tar.gz

          # 1) Download Alpine rootfs
          wget -O rootfs.tar.gz "$MINIROOT"

          # 2) Create blank 1 GiB image file
          truncate -s 1G "$IMG"

          # 3) Partition by sector (512-byte) units:
          #    - Partition 1: 2048–131071 (1 MiB–64 MiB)
          #    - Partition 2: 131072–100% (64 MiB–end)
          sudo parted --script "$IMG" unit s \
            mklabel msdos \
            mkpart primary fat32 2048 131071 \
            mkpart primary ext4  131072 100% \
            set 1 boot on

          # 4) Attach briefly to format
          LOOP=$(sudo losetup --show -fP "$IMG")
          BOOT_DEV="${LOOP}p1"
          ROOT_DEV="${LOOP}p2"

          sudo mkfs.vfat -F 32 -n BOOT "$BOOT_DEV"
          sudo mkfs.ext4 -L ROOTFS "$ROOT_DEV"

          sudo losetup -d "$LOOP"

          # 5) Flash U‑Boot SPL+U-Boot at 8 KiB offset
          dd if="$UBOOT" of="$IMG" bs=1K seek=8 conv=fsync

          # 6) Mount by byte‐offset and populate
          mkdir -p mnt/boot mnt/root

          # offsets in bytes:
          BOOT_OFFSET=$((2048 * 512))      # 1 MiB
          ROOT_OFFSET=$((131072 * 512))    # 64 MiB

          sudo mount -o loop,offset=$BOOT_OFFSET -t vfat "$IMG" mnt/boot
          sudo mount -o loop,offset=$ROOT_OFFSET -t ext4 "$IMG" mnt/root

          sudo tar xzf rootfs.tar.gz -C mnt/root
          sudo cp zImage     mnt/boot/
          sudo cp *.dtb      mnt/boot/
          sudo cp boot.scr   mnt/boot/

          # 7) Cleanup
          sync
          sudo umount mnt/boot mnt/root

          ls -lh "$IMG"

      - name: Upload SD‑Card artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdcard-${{ github.sha }}
          path: alpine-rg353vs-${{ github.sha }}.img

  package-release:
    name: Create Release & Attach Assets
    needs: [build-and-push, make-sd-image]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        id: release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            - **Container**: ghcr.io/${{ github.repository_owner }}/alpine-rg353vs:${{ github.sha }}
            - **SD‑Card image**: alpine-rg353vs-${{ github.ref_name }}.img
            - **Container tarball**: alpine-rg353vs-${{ github.ref_name }}.tar.gz
          draft: false
          prerelease: false

      - name: Upload SD‑Card release asset
        uses: actions/upload-release-asset@v4
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: artifacts/alpine-rg353vs-${{ github.sha }}.img
          asset_name: alpine-rg353vs-${{ github.ref_name }}.img
          asset_content_type: application/octet-stream

      - name: Upload container release asset
        uses: actions/upload-release-asset@v4
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: artifacts/alpine-rg353vs-${{ github.sha }}.tar.gz
          asset_name: alpine-rg353vs-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip
