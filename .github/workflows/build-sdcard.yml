name: Build & Release Alpine RG353VS SD‑Card Image (guestfish)

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build & Push Container
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup QEMU emulation
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push multi‑arch image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          platforms: |
            linux/amd64
            linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/alpine-rg353vs:latest
            ghcr.io/${{ github.repository_owner }}/alpine-rg353vs:${{ github.sha }}

      - name: Save container tarball
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/alpine-rg353vs:${{ github.sha }}
          docker pull "$IMAGE"
          docker save "$IMAGE" | gzip > alpine-rg353vs-${{ github.sha }}.tar.gz

      - name: Upload container artifact
        uses: actions/upload-artifact@v4
        with:
          name: container-${{ github.sha }}
          path: alpine-rg353vs-${{ github.sha }}.tar.gz

  make-sd-image:
    name: Build SD‑Card Image with guestfish
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install guestfish
        run: |
          sudo apt-get update
          sudo apt-get install -y wget libguestfs-tools

      - name: Build SD‑Card Image
        run: |
          set -euxo pipefail
          SHA=${{ github.sha }}
          IMG=alpine-rg353vs-${SHA}.img
          UBOOT=uboot.img
          ROOTFS_TAR="http://dl-cdn.alpinelinux.org/alpine/v3.19/releases/aarch64/alpine-minirootfs-3.19.0-aarch64.tar.gz"

          # Download Alpine rootfs
          wget -O rootfs.tar.gz "$ROOTFS_TAR"

          # Create empty 1GiB image
          truncate -s 1G "$IMG"

          # Partition, format, flash and inject via guestfish
          sudo guestfish --format=raw -a "$IMG" <<-'EOF'
            run
            # Create MBR
            part-init /dev/sda mbr
            # Partition 1: primary FAT32 from 1MiB (sector 2048) to 64MiB (sector 131071)
            part-add /dev/sda p 2048 131071
            # Partition 2: primary ext4 from 64MiB+512B (sector 131073) to end
            part-add /dev/sda p 131073 -1
            part-set-bootable /dev/sda 1 true
            # Format
            mkfs vfat /dev/sda1
            mkfs ext4 /dev/sda2
            # Flash U‑Boot at 8KiB offset => 16 sectors
            dd if=uboot.img of=/dev/sda bs=512 seek=16
            # Mount and inject
            mount /dev/sda2 /
            mkdir /boot
            mount /dev/sda1 /boot
            tar-in rootfs.tar.gz /
            copy-in zImage   /boot/
            copy-in *.dtb    /boot/
            copy-in boot.scr /boot/
            sync
            umount-all
            exit
          EOF

          ls -lh "$IMG"

      - name: Upload SD‑Card artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdcard-${{ github.sha }}
          path: alpine-rg353vs-${{ github.sha }}.img

  package-release:
    name: Create GitHub Release & Attach Assets
    needs: [build-and-push, make-sd-image]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        id: release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            - **Container**: ghcr.io/${{ github.repository_owner }}/alpine-rg353vs:${{ github.sha }}
            - **SD‑Card image**: alpine-rg353vs-${{ github.ref_name }}.img
            - **Container tarball**: alpine-rg353vs-${{ github.ref_name }}.tar.gz
          draft: false
          prerelease: false

      - name: Upload SD‑Card release asset
        uses: actions/upload-release-asset@v4
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: artifacts/alpine-rg353vs-${{ github.sha }}.img
          asset_name: alpine-rg353vs-${{ github.ref_name }}.img
          asset_content_type: application/octet-stream

      - name: Upload container release asset
        uses: actions/upload-release-asset@v4
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: artifacts/alpine-rg353vs-${{ github.sha }}.tar.gz
          asset_name: alpine-rg353vs-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip
