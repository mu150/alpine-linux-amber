# .github/workflows/build-rootfs-16gb.yml
name: Build Alpine Rootfs + Blank 1.2GiB BOOT

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  make-sd-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget parted dosfstools e2fsprogs

      - name: Build Image with 1.2GiB BOOT, rest ROOTFS
        run: |
          set -euxo pipefail

          # parameters
          SHA=${{ github.sha }}
          IMG=alpine-rg353vs-${SHA}.img
          MINIROOT=https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/aarch64/alpine-minirootfs-3.22.0-aarch64.tar.gz

          # 1) Download Alpine minirootfs
          wget -O rootfs.tar.gz "$MINIROOT"

          # 2) Create blank 16 GiB image file
          truncate -s 5G "$IMG"

          # 3) Partition:
          #    - p1: 1MiB → 1229MiB (≈1.2 GiB) FAT32, bootable
          #    - p2: 1229MiB → 100% ext4
          sudo parted --script "$IMG" \
            mklabel msdos \
            mkpart primary fat32 1MiB 1229MiB \
            mkpart primary ext4  1229MiB 100% \
            set 1 boot on

          # 4) Attach loop with partitions
          LOOP=$(sudo losetup --show -fP "$IMG")
          BOOT_DEV="${LOOP}p1"
          ROOT_DEV="${LOOP}p2"

          # 5) Format partitions
          sudo mkfs.vfat -F 32 -n BOOT "$BOOT_DEV"
          sudo mkfs.ext4 -L ROOTFS "$ROOT_DEV"

          # 6) Populate ROOTFS (Alpine)
          mkdir -p mnt/root
          sudo mount "$ROOT_DEV" mnt/root
          sudo tar xzf rootfs.tar.gz -C mnt/root
          sudo umount mnt/root

          # 7) Detach loop
          sudo losetup -d "$LOOP"

          # Inspect
          ls -lh "$IMG"

      - name: Upload SD‑Card artifact
        uses: actions/upload-artifact@v4
        with:
          name: alpine-rootfs-16gb-${{ github.sha }}
          path: alpine-rg353vs-${{ github.sha }}.img
